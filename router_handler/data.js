// 导入数据库操作模块
const array = require('@hapi/joi/lib/types/array');
const db = require('../db/index')

exports.test0 = (req, res) => {


    // 下面生成一段正常的波形
    // 确定正常波动范围的最大值和最小值
    let max = 0.026
    let min = 0.021
    let bb = [];
    for (i = 0; i <= 200; i++) {
        bb[i] = [];//将每一个子元素又定义为数组
        for (n = 0; n <= 1; n++) {
            if (n == 0) {
                // 如果n为0，那么这个是横坐标x，让它随着i增大即可,横坐标从0，一次增长0.01到2
                bb[i][n] = i / 100
            } else if (n == 1) {
                // 如果n为1，那么这个数就是y，设置为随机数
                bb[i][n] = min + Math.random() * (max - min)
            }

        }
    }

    // 至此，一段正常的曲线生成完毕，下面开始定义异常部分

    // 定义随机异常开始的位置,即异常的插入位置
    let start = Math.floor(Math.random() * 200);
    // 定义震动幅度
    let amplitude = 0.75 + Math.random() * 0.5;
    // 保留三位小数
    amplitude = amplitude.toFixed(4)
    // 定义要插入的异常数据集 ,这里只包含y的值
    let cc = [0.0247, 0.0335, 0.0461, 0.0398, 0.0501, 0.0406, 0.0303, 0.0311, 0.0358, 0.0422, 0.0445, 0.0398, 0.0422, 0.0366, 0.0390, 0.0382, 0.0366, 0.0374, 0.0406, 0.0390, 0.0406, 0.0374, 0.0374];


    // 乘以幅值(使用map方法)
    let cc1 = cc.map(x => x * amplitude)
    // 对需要减小的数据点单独处理
    for (p = 0; p <= 23; p++) {
        if (p == 3 || p == 6 || p == 7) {
            cc1[p] = cc[p] / amplitude
        }
    }






    // 遍历正常数据找到插入位置
    for (i = 0; i <= 200; i++) {
        if (i == start) {
            // 找到插入位置之后，开始使用cc数组替换bb数组中的后面23个y值(这个22是因为cc数组的长度是23)
            for (j = start, g = 0; j <= start + 22; j++, g++) {
                if (j >= 201) {
                    break
                } else {
                    (bb[j])[1] = cc1[g]
                }

            }
        }
    }

    // 改变断丝之后正常数据的浮动区间
    for (i = 0; i <= 200; i++) {
        // 给start+22之后的那些数，改变区间，注意这里也要乘以幅值
        if (i == start + 22) {
            for (z = start + 22; z <= 200; z++) {
                (bb[z])[1] = (0.036 + Math.random() * 0.005) * amplitude//变为0.036-0.041之间取随机数,乘以震幅
            }
        }
    }


    // 最后让bb数组的y值取4位小数
    for (i = 0; i <= 200; i++) {
        bb[i][1] = bb[i][1].toFixed(4)
    }


    // 发送最后的bb数组和start的位置,以及幅值
    res.send({ bb: bb, start: start / 100, amplitude: amplitude })

}

exports.test1 = (req, res) => {
    // 下面生成一段正常的波形
    // 确定正常波动范围的最大值和最小值
    let max = 0.062
    let min = 0.058
    let bb = [];
    for (i = 0; i <= 200; i++) {
        bb[i] = [];//将每一个子元素又定义为数组
        for (n = 0; n <= 1; n++) {
            if (n == 0) {
                // 如果n为0，那么这个是横坐标x，让它随着i增大即可,横坐标从0，一次增长0.01到2
                bb[i][n] = i / 100
            } else if (n == 1) {
                // 如果n为1，那么这个数就是y，设置为随机数
                bb[i][n] = min + Math.random() * (max - min)
            }

        }
    }

    // 至此，一段正常的曲线生成完毕，下面开始定义异常部分

    // 定义随机异常开始的位置,即异常的插入位置
    let start = Math.floor(Math.random() * 200);
    // 定义震动幅度
    let amplitude = 0.95 + Math.random() * 0.3;
    // 保留三位小数
    amplitude = amplitude.toFixed(4)
    // 定义要插入的异常数据集 ,这里只包含y的值

    let cc = [0.0576, 0.0703, 0.1012, 0.0774, 0.0489, 0.0695, 0.0798, 0.0584, 0.0592, 0.0774, 0.0727, 0.056, 0.0663, 0.0774, 0.0616, 0.0576, 0.0711, 0.0711, 0.0616, 0.0632, 0.0719, 0.0679, 0.0632, 0.0663, 0.0655, 0.0647, 0.0679, 0.0671, 0.0663, 0.0663, 0.0655
    ]
    // 乘以幅值(使用map方法)
    let cc1 = cc.map(x => x * amplitude)
    // 对需要减小的数据点单独处理
    for (p = 0; p <= 23; p++) {
        if (p == 4 || p == 7) {
            cc1[p] = cc[p] / amplitude
        }
    }



    // 遍历正常数据找到插入位置
    for (i = 0; i <= 200; i++) {
        if (i == start) {
            // 找到插入位置之后，开始使用cc数组替换bb数组中的后面31个y值(这个30是因为cc数组的长度是31)
            for (j = start, g = 0; j <= start + 30; j++, g++) {
                if (j >= 201) {
                    break
                } else {
                    (bb[j])[1] = cc1[g]
                }

            }
        }
    }

    // 改变断丝之后正常数据的浮动区间
    for (i = 0; i <= 200; i++) {
        // 给start+30之后的那些数，改变区间，注意这里也要乘以幅值
        if (i == start + 30) {
            for (z = start + 30; z <= 200; z++) {
                (bb[z])[1] = (0.063 + Math.random() * 0.008) * amplitude//变为0.063-0.071之间取随机数,乘以震幅
            }
        }
    }


    // 最后让bb数组的y值取4位小数
    for (i = 0; i <= 200; i++) {
        bb[i][1] = bb[i][1].toFixed(4)
    }


    // 发送最后的bb数组和start的位置,以及幅值
    res.send({ bb: bb, start: start / 100, amplitude: amplitude })


}

exports.test2 = (req, res) => {


    // 下面生成一段正常的波形
    // 确定正常波动范围的最大值和最小值
    let max = 0.035
    let min = 0.032
    let bb = [];
    for (i = 0; i <= 200; i++) {
        bb[i] = [];//将每一个子元素又定义为数组
        for (n = 0; n <= 1; n++) {
            if (n == 0) {
                // 如果n为0，那么这个是横坐标x，让它随着i增大即可,横坐标从0，一次增长0.01到2
                bb[i][n] = i / 100
            } else if (n == 1) {
                // 如果n为1，那么这个数就是y，设置为随机数
                bb[i][n] = min + Math.random() * (max - min)
            }

        }
    }

    // 至此，一段正常的曲线生成完毕，下面开始定义异常部分

    // 定义随机异常开始的位置,即异常的插入位置
    let start = Math.floor(Math.random() * 200);
    // 定义震动幅度
    let amplitude = 0.95 + Math.random() * 0.3;
    // 保留三位小数
    amplitude = amplitude.toFixed(4)
    // 定义要插入的异常数据集 ,这里只包含y的值

    let cc = [0.0362, 0.0354, 0.0346, 0.0354, 0.0362, 0.0362, 0.0378, 0.0362, 0.037, 0.0378, 0.0378, 0.0385, 0.0393, 0.0378, 0.0385, 0.0393, 0.0393, 0.0401, 0.0409, 0.0409, 0.0543, 0.0488, 0.0519, 0.0535, 0.0504, 0.0527, 0.0543, 0.0512, 0.0567, 0.0496, 0.0559, 0.0551, 0.0512, 0.0583, 0.0535, 0.0551, 0.0598, 0.0535]
    // 乘以幅值(使用map方法)

    // 这个比较特殊，前20个不需要乘以幅度
    let cc1 = []
    for (let i = 0; i <= 200; i++) {
        if (i <= 19) {
            cc1[i] = cc[i]
        } else {
            cc1[i] = cc[i] * amplitude
        }
    }


    // let cc1 = cc.map(x => x * amplitude)
    // 对需要减小的数据点单独处理
    // for (p = 0; p <= 23; p++) {
    //     if (p == 4 || p == 7) {
    //         cc1[p] = cc[p] / amplitude
    //     }
    // }



    // 遍历正常数据找到插入位置
    for (i = 0; i <= 200; i++) {
        if (i == start) {
            // 找到插入位置之后，开始使用cc数组替换bb数组中的后面37个y值(这个37是因为cc数组的长度是38)
            for (j = start, g = 0; j <= start + 37; j++, g++) {
                if (j >= 201) {
                    break
                } else {
                    (bb[j])[1] = cc1[g]
                }

            }
        }
    }

    // 改变断丝之后正常数据的浮动区间
    for (i = 0; i <= 200; i++) {
        // 给start+37之后的那些数，改变区间，注意这里也要乘以幅值
        if (i == start + 37) {
            for (z = start + 37; z <= 200; z++) {
                (bb[z])[1] = (0.051 + Math.random() * 0.007) * amplitude//变为0.063-0.071之间取随机数,乘以震幅
            }
        }
    }


    // 最后让bb数组的y值取4位小数
    for (i = 0; i <= 200; i++) {
        bb[i][1] = bb[i][1].toFixed(4)
    }


    // 发送最后的bb数组和start的位置,以及幅值
    res.send({ bb: bb, start: start / 100, amplitude: amplitude })


}

exports.test_real = (req, res) => {


    // 真实数据一号
    let real0 = [
        0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0868, 0.0868, 0.0860, 0.0852, 0.0860, 0.0868, 0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0852, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0860, 0.0852, 0.0860, 0.0852, 0.0860, 0.0860, 0.0860, 0.0868, 0.0900, 0.0681, 0.0811, 0.1038, 0.0730, 0.0827, 0.0965, 0.0778, 0.0811, 0.0925, 0.0843, 0.0754, 0.0868, 0.0933, 0.0811, 0.0843, 0.0892, 0.0852, 0.0827, 0.0860, 0.0860, 0.0843, 0.0827, 0.0876, 0.0860, 0.0860, 0.0852, 0.0868, 0.0852, 0.0835, 0.0843, 0.0860, 0.0860, 0.0835, 0.0835, 0.0852, 0.0860, 0.0852, 0.0852, 0.0860, 0.0852, 0.0843, 0.0852, 0.0852, 0.0852, 0.0843, 0.0852, 0.0852, 0.0852, 0.0860, 0.0852, 0.0843, 0.0843, 0.0852, 0.0852, 0.0852, 0.0835, 0.0852, 0.0852, 0.0852, 0.0843, 0.0843, 0.0860, 0.0852, 0.0852, 0.0852, 0.0843, 0.0852, 0.0852, 0.0852, 0.0852, 0.0835, 0.0843, 0.0860, 0.0852, 0.0835, 0.0843, 0.0843, 0.0852, 0.0843, 0.0852, 0.0843, 0.0852, 0.0843, 0.0852, 0.0852, 0.0843, 0.0852, 0.0843, 0.0843, 0.0843, 0.0843, 0.0852, 0.0852, 0.0843, 0.0835, 0.0843, 0.0852, 0.0843, 0.0852, 0.0843, 0.0852, 0.0843, 0.0852, 0.0852, 0.0843, 0.0852, 0.0843, 0.0843, 0.0852, 0.0852, 0.0852, 0.0852, 0.0852, 0.0843, 0.0852, 0.0852, 0.0843, 0.0852, 0.0843, 0.0843

    ];
    let real1 = [
        0.0292, 0.0300, 0.0300, 0.0292, 0.0292, 0.0292, 0.0300, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0300, 0.0300, 0.0292, 0.0300, 0.0300, 0.0300, 0.0292, 0.0292, 0.0300, 0.0300, 0.0300, 0.0292, 0.0292, 0.0292, 0.0300, 0.0300, 0.0300, 0.0292, 0.0292, 0.0292, 0.0292, 0.0300, 0.0292, 0.0292, 0.0292, 0.0292, 0.0292, 0.0300, 0.0300, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0292, 0.0292, 0.0292, 0.0300, 0.0292, 0.0292, 0.0292, 0.0292, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0300, 0.0300, 0.0292, 0.0300, 0.0292, 0.0300, 0.0300, 0.0284, 0.0203, 0.0325, 0.0430, 0.0284, 0.0170, 0.0341, 0.0382, 0.0317, 0.0235, 0.0317, 0.0341, 0.0252, 0.0300, 0.0333, 0.0252, 0.0284, 0.0333, 0.0300, 0.0235, 0.0325, 0.0341, 0.0268, 0.0284, 0.0333, 0.0308, 0.0268, 0.0284, 0.0325, 0.0284, 0.0268, 0.0333, 0.0300, 0.0276, 0.0308, 0.0317, 0.0284, 0.0292, 0.0308, 0.0308, 0.0276, 0.0292, 0.0317, 0.0292, 0.0284, 0.0300, 0.0317, 0.0292, 0.0300, 0.0308, 0.0308, 0.0292, 0.0308, 0.0292, 0.0308, 0.0292, 0.0292, 0.0308, 0.0292, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0276, 0.0300, 0.0284, 0.0292, 0.0292, 0.0300, 0.0300, 0.0300, 0.0300, 0.0300, 0.0292, 0.0292, 0.0300, 0.0292, 0.0300, 0.0292, 0.0300, 0.0284, 0.0300, 0.0300, 0.0300, 0.0292, 0.0308, 0.0308, 0.0300, 0.0284, 0.0300, 0.0300, 0.0284, 0.0292, 0.0292, 0.0308, 0.0284, 0.0300, 0.0308, 0.0308, 0.0276, 0.0308, 0.0300, 0.0300, 0.0292, 0.0292, 0.0300, 0.0300, 0.0292, 0.0300, 0.0308, 0.0300, 0.0300, 0.0292, 0.0300, 0.0292, 0.0300, 0.0292, 0.0308, 0.0292, 0.0300, 0.0300, 0.0300, 0.0292, 0.0300, 0.0300, 0.0292, 0.0300, 0.0300, 0.0308, 0.0284, 0.0285
    ];
    let real2 = [
        0.1080, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1096, 0.1096, 0.1096, 0.1096, 0.1096, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1096, 0.1088, 0.1096, 0.1088, 0.1096, 0.1096, 0.1088, 0.1096, 0.1088, 0.1096, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1096, 0.1088, 0.1096, 0.1096, 0.1096, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1080, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1088, 0.1096, 0.1096, 0.1088, 0.1096, 0.1088, 0.1088, 0.1096, 0.1088, 0.1088, 0.1088, 0.1088, 0.1096, 0.1088, 0.1088, 0.1096, 0.1096, 0.1088, 0.2037, 0.1802, 0.1299, 0.1023, 0.0779, 0.1153, 0.1558, 0.1080, 0.1039, 0.1453, 0.1006, 0.1583, 0.0836, 0.1185, 0.0601, 0.0836, 0.1015, 0.0682, 0.1193, 0.0950, 0.1290, 0.1372, 0.1039, 0.0763, 0.0909, 0.0714, 0.0917, 0.0869, 0.0974, 0.1120, 0.1201, 0.1282, 0.1201, 0.1023, 0.1128, 0.0731, 0.0950, 0.0933, 0.1144, 0.1242, 0.1193, 0.1120, 0.1071, 0.0942, 0.0869, 0.0974, 0.0828, 0.1299, 0.1112, 0.1290, 0.1217, 0.1128, 0.1039, 0.0893, 0.0860, 0.0974, 0.0917, 0.1234, 0.1120, 0.1201, 0.1307, 0.0893, 0.1112, 0.0877, 0.0901, 0.1088, 0.0950, 0.1209, 0.1153, 0.1128, 0.1209, 0.0950, 0.1047, 0.0966, 0.0933, 0.1104, 0.1006, 0.1234, 0.1169, 0.1144, 0.1104, 0.0950, 0.0933, 0.0925, 0.0942, 0.1055, 0.1153, 0.1096, 0.1209, 0.1193, 0.1071, 0.0982, 0.0966, 0.0901, 0.1023, 0.0966, 0.1153, 0.1120, 0.1177, 0.1209, 0.1015, 0.1080, 0.0942, 0.0958, 0.1047, 0.1006, 0.1209, 0.1161, 0.1153, 0.1153, 0.0958, 0.1006, 0.0885, 0.0990, 0.1023, 0.1104, 0.1177, 0.1153, 0.1201, 0.1055, 0.0990, 0.0958, 0.0917, 0.0998, 0.1015, 0.1128, 0.1177, 0.1136, 0.1185, 0.0990, 0.1031, 0.0917, 0.0918
    ];
    let real3 = [
        0.0398, 0.0398, 0.0390, 0.0398, 0.0398, 0.0398, 0.0390, 0.0398, 0.0390, 0.0398, 0.0398, 0.0390, 0.0390, 0.0390, 0.0390, 0.0382, 0.0382, 0.0390, 0.0382, 0.0374, 0.0390, 0.0382, 0.0382, 0.0398, 0.0390, 0.0398, 0.0398, 0.0398, 0.0398, 0.0398, 0.0406, 0.0398, 0.0406, 0.0406, 0.0390, 0.0398, 0.0398, 0.0390, 0.0390, 0.0390, 0.0398, 0.0390, 0.0398, 0.0398, 0.0390, 0.0398, 0.0398, 0.0390, 0.0390, 0.0398, 0.0406, 0.0406, 0.0398, 0.0398, 0.0398, 0.0406, 0.0406, 0.0398, 0.0398, 0.0398, 0.0398, 0.0398, 0.0398, 0.0406, 0.0406, 0.0398, 0.0406, 0.0398, 0.0406, 0.0414, 0.0382, 0.0406, 0.0414, 0.0390, 0.0414, 0.0398, 0.0390, 0.0398, 0.0414, 0.0422, 0.0382, 0.0422, 0.0414, 0.0398, 0.0495, 0.0292, 0.0276, 0.0487, 0.0503, 0.0260, 0.0252, 0.0471, 0.0357, 0.0325, 0.0414, 0.0317, 0.0382, 0.0455, 0.0309, 0.0366, 0.0430, 0.0341, 0.0357, 0.0406, 0.0349, 0.0357, 0.0414, 0.0325, 0.0341, 0.0414, 0.0317, 0.0357, 0.0406, 0.0333, 0.0374, 0.0390, 0.0349, 0.0374, 0.0390, 0.0374, 0.0366, 0.0390, 0.0374, 0.0357, 0.0398, 0.0366, 0.0349, 0.0374, 0.0349, 0.0366, 0.0357, 0.0349, 0.0357, 0.0341, 0.0357, 0.0357, 0.0357, 0.0366, 0.0357, 0.0366, 0.0366, 0.0374, 0.0382, 0.0349, 0.0382, 0.0382, 0.0349, 0.0390, 0.0357, 0.0357, 0.0374, 0.0349, 0.0357, 0.0349, 0.0357, 0.0349, 0.0341, 0.0374, 0.0349, 0.0349, 0.0374, 0.0357, 0.0357, 0.0374, 0.0366, 0.0357, 0.0374, 0.0366, 0.0357, 0.0366, 0.0366, 0.0341, 0.0357, 0.0357, 0.0349, 0.0366, 0.0357, 0.0366, 0.0357, 0.0357, 0.0357, 0.0349, 0.0366, 0.0349, 0.0349, 0.0374, 0.0349, 0.0366, 0.0366, 0.0357, 0.0366, 0.0366, 0.0374, 0.0366, 0.0366, 0.0382, 0.0366, 0.0366, 0.0366, 0.0349, 0.0350
    ];
    let real4 = [
        0.0358, 0.0366, 0.0358, 0.0366, 0.0358, 0.0358, 0.0358, 0.0358, 0.0366, 0.0358, 0.0366, 0.0358, 0.0358, 0.0366, 0.0358, 0.0366, 0.0358, 0.0358, 0.0366, 0.0358, 0.0358, 0.0358, 0.0366, 0.0358, 0.0358, 0.0358, 0.0358, 0.0358, 0.0358, 0.0358, 0.0366, 0.0374, 0.0374, 0.0366, 0.0366, 0.0374, 0.0374, 0.0374, 0.0366, 0.0358, 0.0358, 0.0358, 0.0358, 0.0358, 0.0358, 0.0366, 0.0358, 0.0366, 0.0358, 0.0366, 0.0366, 0.0358, 0.0358, 0.0366, 0.0366, 0.0366, 0.0366, 0.0366, 0.0374, 0.0374, 0.0366, 0.0374, 0.0374, 0.0366, 0.0374, 0.0366, 0.0374, 0.0374, 0.0358, 0.0358, 0.0358, 0.0374, 0.0374, 0.0366, 0.0374, 0.0374, 0.0366, 0.0366, 0.0374, 0.0382, 0.0374, 0.0366, 0.0349, 0.0406, 0.0455, 0.0390, 0.0309, 0.0374, 0.0479, 0.0479, 0.0260, 0.0349, 0.0382, 0.0366, 0.0358, 0.0358, 0.0325, 0.0349, 0.0390, 0.0325, 0.0349, 0.0374, 0.0333, 0.0358, 0.0341, 0.0333, 0.0382, 0.0325, 0.0349, 0.0374, 0.0325, 0.0349, 0.0366, 0.0333, 0.0358, 0.0358, 0.0325, 0.0358, 0.0366, 0.0333, 0.0358, 0.0366, 0.0333, 0.0349, 0.0358, 0.0333, 0.0358, 0.0349, 0.0333, 0.0358, 0.0349, 0.0333, 0.0358, 0.0349, 0.0341, 0.0349, 0.0349, 0.0333, 0.0349, 0.0349, 0.0349, 0.0349, 0.0341, 0.0349, 0.0349, 0.0341, 0.0349, 0.0349, 0.0349, 0.0341, 0.0349, 0.0341, 0.0349, 0.0349, 0.0341, 0.0341, 0.0341, 0.0341, 0.0349, 0.0349, 0.0349, 0.0358, 0.0358, 0.0349, 0.0349, 0.0358, 0.0358, 0.0349, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0341, 0.0349, 0.0341, 0.0341, 0.0349, 0.0333, 0.0349, 0.0349, 0.0358, 0.0349, 0.0349, 0.0358, 0.0349, 0.0349, 0.0358, 0.0349, 0.0349, 0.0349, 0.0349, 0.0349, 0.0349, 0.0349, 0.0349, 0.0350
    ];
    let real5 = [
        0.0284, 0.0284, 0.0276, 0.0276, 0.0293, 0.0284, 0.0276, 0.0284, 0.0293, 0.0284, 0.0284, 0.0284, 0.0284, 0.0284, 0.0284, 0.0276, 0.0293, 0.0284, 0.0284, 0.0276, 0.0284, 0.0284, 0.0284, 0.0276, 0.0284, 0.0284, 0.0284, 0.0284, 0.0276, 0.0276, 0.0284, 0.0284, 0.0284, 0.0276, 0.0284, 0.0195, 0.0309, 0.0333, 0.0276, 0.0341, 0.0293, 0.0195, 0.0284, 0.0325, 0.0252, 0.0236, 0.0301, 0.0276, 0.0244, 0.0268, 0.0309, 0.0228, 0.0260, 0.0293, 0.0284, 0.0236, 0.0276, 0.0276, 0.0276, 0.0284, 0.0276, 0.0260, 0.0284, 0.0284, 0.0260, 0.0252, 0.0268, 0.0268, 0.0276, 0.0260, 0.0260, 0.0260, 0.0284, 0.0268, 0.0276, 0.0268, 0.0276, 0.0276, 0.0268, 0.0284, 0.0268, 0.0260, 0.0268, 0.0268, 0.0260, 0.0268, 0.0260, 0.0260, 0.0268, 0.0268, 0.0260, 0.0268, 0.0260, 0.0268, 0.0268, 0.0260, 0.0268, 0.0268, 0.0268, 0.0276, 0.0284, 0.0268, 0.0268, 0.0284, 0.0268, 0.0260, 0.0268, 0.0268, 0.0260, 0.0268, 0.0260, 0.0260, 0.0276, 0.0276, 0.0268, 0.0268, 0.0268, 0.0276, 0.0276, 0.0276, 0.0260, 0.0260, 0.0260, 0.0268, 0.0260, 0.0260, 0.0268, 0.0268, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0268, 0.0260, 0.0276, 0.0268, 0.0276, 0.0276, 0.0268, 0.0268, 0.0268, 0.0268, 0.0268, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0268, 0.0268, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0268, 0.0268, 0.0252, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0268, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0268, 0.0252, 0.0252, 0.0260, 0.0260, 0.0268, 0.0268, 0.0268, 0.0268, 0.0268, 0.0268, 0.0268, 0.0260, 0.0265
    ];
    let real6 = [
        0.0228, 0.0236, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0211, 0.0219, 0.0228, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0211, 0.0219, 0.0211, 0.0219, 0.0211, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0228, 0.0228, 0.0219, 0.0219, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0211, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0228, 0.0228, 0.0219, 0.0211, 0.0219, 0.0219, 0.0211, 0.0219, 0.0219, 0.0219, 0.0219, 0.0228, 0.0228, 0.0228, 0.0219, 0.0228, 0.0219, 0.0228, 0.0228, 0.0228, 0.0228, 0.0219, 0.0219, 0.0219, 0.0228, 0.0228, 0.0228, 0.0171, 0.0236, 0.0163, 0.0228, 0.0268, 0.0163, 0.0187, 0.0203, 0.0244, 0.0179, 0.0203, 0.0219, 0.0187, 0.0203, 0.0219, 0.0236, 0.0203, 0.0228, 0.0219, 0.0211, 0.0211, 0.0179, 0.0219, 0.0179, 0.0187, 0.0195, 0.0179, 0.0195, 0.0187, 0.0187, 0.0203, 0.0203, 0.0195, 0.0187, 0.0187, 0.0187, 0.0195, 0.0187, 0.0195, 0.0195, 0.0195, 0.0195, 0.0187, 0.0195, 0.0203, 0.0203, 0.0195, 0.0195, 0.0203, 0.0195, 0.0211, 0.0195, 0.0203, 0.0195, 0.0195, 0.0195, 0.0187, 0.0195, 0.0187, 0.0187, 0.0187, 0.0187, 0.0187, 0.0195, 0.0203, 0.0203, 0.0203, 0.0187, 0.0203, 0.0211, 0.0210
    ];
    let real7 = [
        0.0244, 0.0244, 0.0260, 0.0252, 0.0252, 0.0252, 0.0244, 0.0236, 0.0236, 0.0244, 0.0244, 0.0236, 0.0244, 0.0260, 0.0252, 0.0244, 0.0252, 0.0252, 0.0244, 0.0244, 0.0260, 0.0252, 0.0252, 0.0252, 0.0252, 0.0244, 0.0252, 0.0252, 0.0260, 0.0244, 0.0244, 0.0244, 0.0244, 0.0236, 0.0244, 0.0244, 0.0317, 0.0187, 0.0203, 0.0244, 0.0252, 0.0244, 0.0252, 0.0203, 0.0236, 0.0260, 0.0252, 0.0268, 0.0236, 0.0236, 0.0244, 0.0252, 0.0244, 0.0236, 0.0211, 0.0228, 0.0244, 0.0236, 0.0236, 0.0228, 0.0252, 0.0260, 0.0236, 0.0236, 0.0236, 0.0244, 0.0244, 0.0244, 0.0236, 0.0236, 0.0236, 0.0244, 0.0236, 0.0236, 0.0244, 0.0244, 0.0244, 0.0252, 0.0252, 0.0244, 0.0236, 0.0244, 0.0236, 0.0244, 0.0244, 0.0236, 0.0236, 0.0244, 0.0236, 0.0244, 0.0244, 0.0244, 0.0236, 0.0236, 0.0236, 0.0228, 0.0244, 0.0236, 0.0244, 0.0236, 0.0236, 0.0244, 0.0228, 0.0244, 0.0244, 0.0244, 0.0236, 0.0244, 0.0244, 0.0236, 0.0228, 0.0236, 0.0236, 0.0228, 0.0236, 0.0228, 0.0228, 0.0244, 0.0236, 0.0244, 0.0244, 0.0244, 0.0244, 0.0236, 0.0244, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0219, 0.0228, 0.0228, 0.0236, 0.0244, 0.0244, 0.0236, 0.0244, 0.0236, 0.0236, 0.0244, 0.0236, 0.0236, 0.0244, 0.0236, 0.0236, 0.0236, 0.0244, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0244, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0244, 0.0244, 0.0236, 0.0244, 0.0236, 0.0244, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0236, 0.0219, 0.0236, 0.0228, 0.0228, 0.0228, 0.0228, 0.0228, 0.0236, 0.0236, 0.0236, 0.0236, 0.0237
    ];
    let real8 = [
        0.0106, 0.0114, 0.0106, 0.0106, 0.0106, 0.0106, 0.0114, 0.0106, 0.0114, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0114, 0.0106, 0.0098, 0.0106, 0.0106, 0.0106, 0.0098, 0.0106, 0.0106, 0.0106, 0.0106, 0.0098, 0.0106, 0.0106, 0.0106, 0.0114, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0114, 0.0106, 0.0106, 0.0106, 0.0098, 0.0106, 0.0098, 0.0090, 0.0098, 0.0098, 0.0090, 0.0098, 0.0098, 0.0098, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0098, 0.0114, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0098, 0.0106, 0.0106, 0.0106, 0.0106, 0.0098, 0.0106, 0.0098, 0.0098, 0.0106, 0.0098, 0.0098, 0.0098, 0.0106, 0.0098, 0.0098, 0.0106, 0.0106, 0.0098, 0.0106, 0.0098, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0106, 0.0098, 0.0098, 0.0098, 0.0098, 0.0065, -0.0008, 0.0187, 0.0244, 0.0041, 0.0146, 0.0098, 0.0195, 0.0106, 0.0090, 0.0114, 0.0138, 0.0098, 0.0049, 0.0106, 0.0098, 0.0073, 0.0081, 0.0122, 0.0098, 0.0081, 0.0098, 0.0106, 0.0106, 0.0098, 0.0106, 0.0098, 0.0090, 0.0090, 0.0098, 0.0081, 0.0081, 0.0090, 0.0081, 0.0098, 0.0098, 0.0090, 0.0106, 0.0106, 0.0098, 0.0098, 0.0098, 0.0106, 0.0081, 0.0098, 0.0090, 0.0098, 0.0090, 0.0090, 0.0106, 0.0098, 0.0098, 0.0098, 0.0098, 0.0090, 0.0090, 0.0090, 0.0106, 0.0081, 0.0090, 0.0098, 0.0090, 0.0090, 0.0098, 0.0098, 0.0081, 0.0090, 0.0098, 0.0098, 0.0090, 0.0081, 0.0090, 0.0098, 0.0098, 0.0098, 0.0098, 0.0090, 0.0098, 0.0098, 0.0090, 0.0098, 0.0090, 0.0098, 0.0098, 0.0090, 0.0098, 0.0090, 0.0098, 0.0098, 0.0098, 0.0090, 0.0090, 0.0090, 0.0090, 0.0081, 0.0081, 0.0090, 0.0090, 0.0098, 0.0098, 0.0099
    ];
    let real9 = [
        0.0650, 0.0641, 0.0650, 0.0650, 0.0641, 0.0641, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0641, 0.0641, 0.0650, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0658, 0.0650, 0.0641, 0.0650, 0.0658, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0658, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0658, 0.0650, 0.0658, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0641, 0.0633, 0.0650, 0.0650, 0.0633, 0.0658, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0641, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0650, 0.0706, 0.0593, 0.0755, 0.0674, 0.0536, 0.0731, 0.0650, 0.0560, 0.0682, 0.0690, 0.0585, 0.0641, 0.0690, 0.0585, 0.0641, 0.0698, 0.0601, 0.0625, 0.0682, 0.0609, 0.0625, 0.0666, 0.0633, 0.0641, 0.0633, 0.0641, 0.0650, 0.0617, 0.0641, 0.0658, 0.0609, 0.0641, 0.0658, 0.0609, 0.0641, 0.0666, 0.0609, 0.0633, 0.0658, 0.0617, 0.0633, 0.0650, 0.0625, 0.0641, 0.0641, 0.0633, 0.0633, 0.0633, 0.0633, 0.0650, 0.0633, 0.0633, 0.0650, 0.0625, 0.0641, 0.0650, 0.0625, 0.0641, 0.0641, 0.0641, 0.0633, 0.0641, 0.0625, 0.0633, 0.0625, 0.0641, 0.0633, 0.0641, 0.0641, 0.0641, 0.0633, 0.0641, 0.0641, 0.0633, 0.0633, 0.0641, 0.0650, 0.0625, 0.0641, 0.0641, 0.0625, 0.0633, 0.0633, 0.0641, 0.0641, 0.0633, 0.0625, 0.0633, 0.0625, 0.0633, 0.0633, 0.0633, 0.0625, 0.0633, 0.0617, 0.0625, 0.0633, 0.0625, 0.0633, 0.0641, 0.0633, 0.0633, 0.0633, 0.0633, 0.0625, 0.0625, 0.0633, 0.0633, 0.0633, 0.0641, 0.0633, 0.0641, 0.0641, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0633, 0.0630
    ]



    let start1 = 0
    // 生成一个随机数来选择用哪个真实数据
    let rad = Math.floor(Math.random() * 10)  //生成0 ~ 9 
    // 定义偏差
    let piancha = 0
    // 选用的真实异常数据
    let real_this = []
    // 判断随机数的值，选用对应的真实异常数据
    if (rad == 0) {
        real_this = real0
        piancha = 0.02
        start1 = 0.79
    } else if (rad == 1) {
        real_this = real1
        piancha = -0.014
        start1 = 0.68
    } else if (rad == 2) {
        real_this = real2
        piancha = 0.009
        start1 = 0.67
    } else if (rad == 3) {
        real_this = real3
        piancha = -0.0004
        start1 = 0.83
    } else if (rad == 4) {
        real_this = real4
        piancha = -0.0067
        start1 = 0.82
    } else if (rad == 5) {
        real_this = real5
        piancha = -0.0005
        start1 = 0.34
    } else if (rad == 6) {
        real_this = real6
        piancha = 0.015
        start1 = 1.29
    } else if (rad == 7) {
        real_this = real7
        piancha = 0.018
        start1 = 0.34
    } else if (rad == 8) {
        real_this = real8
        piancha = 0.005
        start1 = 0.99
    } else if (rad == 9) {
        real_this = real9
        piancha = 0.059
        start1 = 0.76
    }



    let bb = [];

    for (i = 0; i <= 200; i++) {
        bb[i] = [];//将每一个子元素又定义为数组
        for (n = 0; n <= 1; n++) {
            if (n == 0) {
                // 如果n为0，那么这个是横坐标x，让它随着i增大即可,横坐标从0，一次增长0.01到2
                bb[i][n] = i / 100
            } else if (n == 1) {
                // 如果n为1，那么这个数就是y，设置为真实数据

                bb[i][n] = real_this[i] - piancha
            }

        }
    }

    let amplitude = 0;


    // 最后让bb数组的y值取4位小数
    for (i = 0; i <= 200; i++) {
        bb[i][1] = bb[i][1].toFixed(4)
    }


    // 发送最后的bb数组和start的位置,以及幅值
    res.send({ bb: bb, start: start1, amplitude: amplitude })
}